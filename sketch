import processing.sound.*;
import processing.serial.*;
Sound s;
SinOsc[] sinOs = new SinOsc[3];
SqrOsc[] sqrOs = new SqrOsc[3];
SawOsc[] sawOs = new SawOsc[3];
SqrOsc square1;
SqrOsc square2;
SqrOsc square3;
SinOsc sine1;
SinOsc sine2;
SinOsc sine3;
SawOsc saw1;
SawOsc saw2;
SawOsc saw3;

TriOsc triOsc;
Env env;

float attackTime = 0.001;
float sustainTime = 0.004;
float sustainLevel = 0.3;
float releaseTime = 0.4;







Serial myPort;  // Create object from Serial class
String val;      // Data received from the serial port
String joystick;
String xCoorVal;
String yCoorVal;
String btn1;
String btn2;
String switchBtn;

//State 0: Sine wave
//State 1: Square wave 
//State 2: Sawtooth
int currentState = 0;



//for the sine wave drawing
int xspacing = 16;   // How far apart should each horizontal location be spaced
int w;              // Width of entire wave

float theta = 0.8;  // Start angle at 0
float amplitude = 100.0;  // Height of wave
float period = 300.0;  // How many pixels before the wave repeats
float dx;  // Value for incrementing X, a function of period and xspacing
float[] yvalues;  // Using an array to store height values for the wave
float ampSound = 0.20;
float periodSound = 200.0;




void playArr(SinOsc[] arr,float amp, float freq) {
  
  for (int i = 0; i < arr.length; i++) {
    arr[i].play();
    if (i == 0)
      arr[i].freq(freq);
    else if (i == 1)
      arr[i].freq(freq + 5);
    else 
      arr[i].freq(freq-5);
    arr[i].amp(amp);
    
  }
  
  
}

void playArr(SqrOsc[] arr,float amp, float freq) {
  
  for (int i = 0; i < arr.length; i++) {
    arr[i].play();
    if (i == 0)
      arr[i].freq(freq);
    else if (i == 1)
      arr[i].freq(freq + 5);
    else 
      arr[i].freq(freq-5);
    arr[i].amp(amp);
    
  }
  
  
}

void playArr(SawOsc[] arr,float amp, float freq) {
  
  for (int i = 0; i < arr.length; i++) {
    arr[i].play();
    if (i == 0)
      arr[i].freq(freq);
    else if (i == 1)
      arr[i].freq(freq + 5);
    else 
      arr[i].freq(freq-5);
    arr[i].amp(amp);
    
  }
  
  
}

void setup() 
{
  size(500, 500);
  w = width+16;
  dx = (TWO_PI / period) * xspacing;
  yvalues = new float[w/xspacing];
  String portName = Serial.list()[6];
  System.out.println(portName);
  myPort = new Serial(this, portName, 115200);
  
  
   
  sine1 = new SinOsc(this);
  sine2 = new SinOsc(this);
  sine3 = new SinOsc(this);
  sinOs[0] = sine1;
  sinOs[1] = sine2;
  sinOs[2] = sine3;
  square1 = new SqrOsc(this);
  square2 = new SqrOsc(this);
  square3 = new SqrOsc(this);
  sqrOs[0] = square1;
  sqrOs[1] = square2;
  sqrOs[2] = square3;
  saw1 = new SawOsc(this);
  saw2 = new SawOsc(this);
  saw3 = new SawOsc(this);
  sawOs[0] = saw1;
  sawOs[1] = saw2;
  sawOs[2] = saw3;
  
  // Create triangle wave
  triOsc = new TriOsc(this);

  // Create the envelope 
  env  = new Env(this); 
 
   
   
  
  

  // Create a Sound object for globally controlling the output volume.
  s = new Sound(this);
}

void mousePressed() {
  
}

void reSetupWave() {
   dx = (TWO_PI / period) * xspacing;
  yvalues = new float[w/xspacing];
  
}


void draw()
{
  background(0);
    
  

  if ( myPort.available() > 0) {  // If data is available,
    val = myPort.readStringUntil('\n');
   
    
  }
  String inputs[] = split(val,',');
  if (inputs.length == 6) {
    xCoorVal = inputs[0];
    yCoorVal = inputs[1];
    joystick = inputs[2];
    btn1 = inputs[3];
    btn2 = inputs[4];
    switchBtn = inputs[5];
    switchBtn = trim(switchBtn);
    System.out.println("--------------");
    System.out.println(switchBtn);
  }
  
  
   if (btn1.equals("1")) {
     if (currentState == 0 && switchBtn.equals("0") ) { 
      currentState = 0;
      } else if (currentState == 0 && switchBtn.equals("1") ) {
        currentState = 1;
      } else if (currentState == 1 && switchBtn.equals("0") ) {
        currentState = 0;
      } else if (currentState == 1 && switchBtn.equals("1") ) {
        currentState = 1;
      } 
   } else {
     if (currentState == 0 && switchBtn.equals("0") ) { 
      currentState = 0;
      } else if (currentState == 0 && switchBtn.equals("1") ) {
        currentState = 2;
      } else if (currentState == 2 && switchBtn.equals("0") ) {
        currentState = 0;
      } else if (currentState == 2 && switchBtn.equals("1") ) {
        currentState = 2;
      } 
     
   }
   
   if (btn1.equals("0")) {
     triOsc.play();
     env.play(triOsc, attackTime, sustainTime, sustainLevel, releaseTime);
    
   }
 
  
  createPanel(currentState);
  changeAudio(currentState);
  
   System.out.println("--------------");
    
  
  
}

void stopEverythingElse() {
  for (int i = 0; i < 3; i++) {
    sinOs[i].stop();
    sqrOs[i].stop();
    sawOs[i].stop();
  }
  
}

void changeAudio(int curState) {
  if (curState == 0) {
    stopEverythingElse();
    playArr(sinOs, ampSound, periodSound);
    
  } else if (curState == 1) {
    stopEverythingElse();
    playArr(sqrOs, ampSound, periodSound);
  } else {
    stopEverythingElse();
    playArr(sawOs, ampSound, periodSound);
    
    
  }
  
  
  
}

void createPanel(int state) {
  if (switchBtn != null && switchBtn.equals("1")) {
       background(255);
    } else {
      background(0);
    }
  if (btn2 != null && btn2.equals("0")) {
    increaseXSpace();
  }
  
  if (joystick != null && joystick.equals("0")) {
    decreaseXSpace();
  }
  
  
  amplitude = ampCalc(parseInt(yCoorVal));
  period = ampPeriod(parseInt(xCoorVal));
  ampSound = ampCalcSound(parseInt(yCoorVal));
  periodSound = ampPeriodSound(parseInt(xCoorVal));
  //add functions for changing audio amp and period here
  reSetupWave();
  calcWave(state);
  renderWave();

  
  
}

float sqw(float a) {
  a /= TWO_PI;
  a -= int(a);
  return a < .5? -1 : 1;
}


float sawtooth(float a) {
  a /= TWO_PI;
  a -= int(a);
  return map(a,0,1,-1,1);
}



void calcWave(int state) {
  // Increment theta (try different values for 'angular velocity' here
  theta += 0.02;

  // For every x value, calculate a y value with sine function
  float x = theta;
  
  for (int i = 0; i < yvalues.length; i++) {
    if (state == 0) {
      yvalues[i] = sin(x)*amplitude;
    } else if (state == 1) {
      yvalues[i] = sqw(x)*amplitude;
    } else {
      yvalues[i] = sawtooth(x)*amplitude;
    }
    
    x+=dx;
  }
}

void renderWave() {
  noStroke();
  if (switchBtn.equals("1")) {
    fill(0);
  } else {
    fill(255);
  }
  
  // A simple way to draw the wave with an ellipse at each location
  for (int x = 0; x < yvalues.length; x++) {
    ellipse(x*xspacing, height/2+yvalues[x], 16, 16);
  }
}

float ampCalc(int ampVal) {
  return (50 + ((250.0 - 50.0)/(4095.0 - 0.0)) * (ampVal - 0));
}

float ampPeriod(int ampVal) {
  return (100.0 + ((800.0 - 100.0)/(4095.0 - 0.0)) * (ampVal - 0));
}

float ampCalcSound(int ampVal) {
  return (0.0 + ((1.0 - 0.0)/(4095.0 - 0.0)) * (ampVal - 0.0));
}

float ampPeriodSound(int ampVal) {
  return (100.0 + ((800.0 - 100.0)/(4095.0 - 0.0)) * (ampVal - 0));
}



void increaseXSpace() {
  if (xspacing <= 35) 
    xspacing += 2;
  
}

void decreaseXSpace() {
  if (xspacing >= 4)
    xspacing -= 2;
  
}

